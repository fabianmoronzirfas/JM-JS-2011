/* * @author fabiantheblind *  *  */// You must copy the file "glue code.jsx" from the XML Rules folder (inside the// Scripts// folder inside your InDesign folder) to the folder containing this script, or// provide a full// path to the file in the next line.#include "./meta/glue code.jsx";#include "./meta/processXML.js";#include "./meta/setupStyles.js";main();// ------------function main(){		var numOfItems;			try {		var myDoc = app.activeDocument;		var myList = myDoc.pages.everyItem().name;		setDocBasics(myDoc);	} catch (e) {				alert("ERROR: you have no active Document!\n" + e);		exit();}	// set the XMLImport preferences		xmlImportPref(myDoc);		var myRoot;		try {			myRoot = myDoc.importXML(File.openDialog("Choose your .xml file"));					} catch (e) {			alert("ERROR: :( Sorry, your XML Document seems broken.\n" + e);			exit();		}		//Count all items in 		numOfItems = countItems(myDoc);		//		alert("You have "+numOfItems+" Items");				try{			makeAttributesFromInfo(myDoc);					}catch (e){		alert("ERROR: No i could not make your Attributes for processing the xml" + e);		exit();		}				try{			sortGroups(myDoc);					}catch(e){			alert("ERROR: Could not move Elements to group" + e);			exit();		}		try{// first we move the normal ones to the front than the focus small stays at end		sortInGroupByPriority(myDoc);		}catch(e){						alert("ERROR: Could not move the normal Elements in group" + e);			exit();			}					try{makeImgElement(myDoc);			}catch (e){								alert("ERROR: Could not move the image Elements into new Element group" + e);				exit();				}// -------------------------// From here on it does something on the page	var myPageName;	var myPage;	var myParStyles = makeParstylesArray(myDoc);	var myCharStyles = makeCharstylesArray(myDoc);	//	try{////	myPageName = myPageDialogUI(myDoc);////		//		myPage = myDoc.pages.item(myPageName);//	} catch(e){//		//		alert("ERROR: Sorry cant find the page u want\n "+e);//		exit();//	}			myUI(myDoc, myPage,myPageName , myList);	//	var myFrame = myPage.textFrames.add();//	myFrame.geometricBounds = myGetColumns(myDoc,myPage);	alert("Done");}function myUI(myDoc, myPage,myPageName, myList){	var myNumOItems = 12;    //<fragment>	var myDialog = app.dialogs.add({name:"XML Importer", canCancel:true});	with(myDialog){		//Add a dialog column.		with(dialogColumns.add()){			//Create a border panel.			//Create another border panel.			with(borderPanels.add()){				with(dialogColumns.add()){					staticTexts.add({staticLabel:" There are "+myNumOItems+" items to process"});				}			}			//Create another border panel.			with(borderPanels.add()){				with(dialogColumns.add()){					staticTexts.add({staticLabel:"Chose page to place"});				}					with(dialogColumns.add()){					//Create a pop-up menu ("dropdown") control.					var myPageDropdown = dropdowns.add({						stringList:myList,						selectedIndex:0});				}				var myAddPage = checkboxControls.add({					staticLabel: "or create a new page",//				checkedState: true					});			}			//Create another border panel.			with(borderPanels.add()){								var myFocusCheckBox = checkboxControls.add({					staticLabel: "place focus",				checkedState: true					});				var myNormalCheckBox = checkboxControls.add({					staticLabel: "place normal",					checkedState: true					});				var mySmallCheckBox = checkboxControls.add({					staticLabel: "place small",					checkedState: true					});				}							}		}		//Display the dialog box.	if(myDialog.show() == true){		var myParagraphAlignment, myPointSize, myVerticalJustification;//		//Get the vertical justification setting from the pop-up menu.//		if(myPageDropdown.selectedIndex == 0){//			myVerticalJustification = VerticalJustification.topAlign;	//		}		//		var myPage;//		var myPageName;				if(myAddPage.checkedState==true){			myPage = myDoc.pages.add();			myPageName = myPage.name;		}else {//			myPage = myList[myPageDropdown.selectedIndex];			myPageName =  myList[myPageDropdown.selectedIndex];					}						myDialog.destroy();		//here has to come the xml processing				myPage = myDoc.pages.item(myPageName);						placeGroup(myDoc,myPage,2);	}	else{		myDialog.destroy();		alert("all that thinking for nothing? Better luck nexttime!");			}}/* * the pulldown dialog to choose the page to place the content to *  * @returns *///function myPageDialogUI(myDoc){//	var myList = myDoc.pages.everyItem().name;//	//	//	var myDialog = app.dialogs.add({name: "Choose the page to place your content",canCancel: true});//with (myDialog){//		// Add a dialog column.//		with (dialogColumns.add()){//			// Create a border panel.//			with (borderPanels.add()){//				with (dialogColumns.add()){//					// The following line shows how to set a property as you//					// create an object.//					staticTexts.add({staticLabel: "if you cancel I create a new page. Or I use the page named: "});//				}////				with(dialogColumns.add()){//				var myDropDown = dropdowns.add({//					stringList:myList,//					selectedIndex:0//			});	//				//				}//			}//		}//		//		with (dialogColumns.add()){//			// Create a border panel.//			with (borderPanels.add()){//				with (dialogColumns.add()){//					// The following line shows how to set a property as you//					// create an object.//					staticTexts.add({staticLabel: "Select the Group To Place"});//				}////				with(dialogColumns.add()){//				var CheckBox = checkboxControls.add({//					staticLabel: "Fokus platzieren",//					checkedState: true//	//			});	//				//				}//			}//		}//		//		//		if (myDialog.show() == true) {//			var myPage;//			// myTag = myDropDown.selectedIndex;//			myPage = myList[myDropDown.selectedIndex];//			myDialog.destroy();//			return myPage;//		}else {//			var myPage = myDoc.pages.add();//			myDialog.destroy();//			return myPage.name;//		}//	}//}function setDocBasics(myDoc){	with	(myDoc.documentPreferences){		horizontalMeasurementUnits = MeasurementUnits.MILLIMETERS;		verticalMeasurementUnits = MeasurementUnits.MILLIMETERS;		rulerOrigin = RulerOrigin.PAGE_ORIGIN;		documentBleedBottomOffset = "3mm";		documentBleedTopOffset = "3mm";		documentBleedInsideOrLeftOffset = "3mm";		documentBleedOutsideOrRightOffset = "3mm";	}}