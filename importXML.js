/* * @author fabiantheblind *  *  */// You must copy the file "glue code.jsx" from the XML Rules folder (inside the// Scripts// folder inside your InDesign folder) to the folder containing this script, or// provide a full// path to the file in the next line.#include "./meta/glue code.jsx";#include "./meta/processXML.js";#include "./meta/setupStyles.js";main();// ------------function main(){		var numOfItems;	var myDate = new Date();	var myLogFile = myGetFileName();	var myFileContent = myLogFile.read();	var myErrorLog = myFileContent +"\n"+"Starting Log file at "+myDate +"\n";			var myDoc = app.activeDocument;		with(myDoc){		viewPreferences.horizontalMeasurementUnits = MeasurementUnits.MILLIMETERS;		viewPreferences.verticalMeasurementUnits = MeasurementUnits.MILLIMETERS;		viewPreferences.rulerOrigin = RulerOrigin.PAGE_ORIGIN;		}		makeMetaStyle(myDoc);		var myList = myDoc.pages.everyItem().name;		myErrorLog = myErrorLog + "Got these Pages: "+ myList.toString() + "\n";	// set the XMLImport preferences		xmlImportPref(myDoc);		var myAppendDialoge =  app.dialogs.add({name:"Continue or Import", canCancel:true});		with(myAppendDialoge){			//Add a dialog column.						with(dialogColumns.add()){				with(dialogRows.add()){				//Create a border panel.				//Create another border panel.				with(borderPanels.add()){					with(dialogColumns.add()){						staticTexts.add({staticLabel:"Press \"Ok\" for a new XML import."});																				}				}			}			with(dialogColumns.add()){				with(dialogRows.add()){				//Create a border panel.				//Create another border panel.				with(borderPanels.add()){					with(dialogColumns.add()){						staticTexts.add({staticLabel:"   Press \"Abbrechen\" to continue..."});											}									}				}				}			}					//Display the dialog box.			if(myAppendDialoge.show() == true){				myAppendDialoge.destroy();				var myRoot;				try {					var myXMLFile = File.openDialog("Choose your .xml file");					myErrorLog = myErrorLog + "Got this xml file: "+ myXMLFile.displayName.toString() + "\n";					myRoot = myDoc.importXML(myXMLFile);									} catch (e) {					alert("ERROR: :( Sorry, your XML Document seems broken.\n" + e);					myErrorLog = myErrorLog + e.toString() + "\n";									}								mapManually(myDoc);				//Count all items in 				numOfItems = countItems(myDoc);				myErrorLog = myErrorLog + "Got "+ myList.toString() + "  items in this xml \n";//				alert("You have "+numOfItems+" Items");								try{					makeAttributesFromInfo(myDoc);									}catch (e){				alert("ERROR: No i could not make your Attributes for processing the xml" + e);				myErrorLog = myErrorLog + e.toString() + "\n";				}								try{					sortGroups(myDoc);									}catch(e){					alert("ERROR: Could not move Elements to group" + e);					myErrorLog = myErrorLog + e.toString() + "\n";				}				try{		// first we move the normal ones to the front than the focus small stays at end				sortInGroupByPriority(myDoc);				}catch(e){										alert("ERROR: Could not move the normal Elements in group" + e);					myErrorLog = myErrorLog + e.toString() + "\n";				}									try{makeImgElement(myDoc);					}catch (e){												alert("ERROR: Could not move the image Elements into new Element group" + e);						myErrorLog = myErrorLog + e.toString() + "\n";					}		// -------------------------		// From here on it does something on the page			var myPageName;			var myPage;//			var myParStyles = makeParstylesArray(myDoc);//			var myCharStyles = makeCharstylesArray(myDoc);			}			else{				myAppendDialoge.destroy();							}				var myItemsList;	makeItemList(myDoc);	myItemsList = myDoc.xmlElements.item(0).xmlElements.item("itemsList").xmlAttributes.everyItem();		myUI(myDoc, myPage,myPageName , myList,myItemsList,myErrorLog,myLogFile);			}}function myUI(myDoc, myPage,myPageName, myList,myItemsList, myErrorLog, myLogFile){	var myNumOItems = 0;//	var myGroupList //= myDoc.xmlElements.item("Root").xmlElements.item("seite").xmlElements.everyItem().markupTag.name;		//	myGroups =  myDoc.xmlElements.item("Root").xmlElements.item("seite").xmlElements.item("group");//	for (var i = 0;i < myGroups.xmlElements.length;i++ ){////		myNumOItems = myNumOItems + myGroups.xmlElements.length;////		myNumOItems = myGroups.xmlElements.length;//		myGroupList = myGroups.xmlElements.item(i).xmlAttributes.item("id").value.toString();//		//	}    //<fragment>	var myDialog = app.dialogs.add({name:"XML Importer", canCancel:true});	with(myDialog){		//Add a dialog column.		with(dialogColumns.add()){			//Create a border panel.						with(borderPanels.add()){				with(properties){					minWidth:200									}				with(dialogColumns.add()){				staticTexts.add({staticLabel:"Chose Group to place"});			}					with(dialogColumns.add()){					//Create a pop-up menu ("dropdown") control.					var myGroupDropdown = dropdowns.add({						stringList:["0","1","2","3","4","5","6","7","8","9","10"],						selectedIndex:0});				}				var myPlaceAll = checkboxControls.add({					staticLabel: "or place everything!"//				checkedState: true					});				with(dialogColumns.add()){					//Create a pop-up menu ("dropdown") control.					var myArtikelDropdown = dropdowns.add({						stringList:["0","1","2","3","4","5","6","7","8","9","10"],						selectedIndex:0});				}											}			//Create another border panel.			with(borderPanels.add({minWidth:200})){				with(dialogColumns.add()){					staticTexts.add({staticLabel:"Chose page to place"});				}					with(dialogColumns.add()){					//Create a pop-up menu ("dropdown") control.					var myPageDropdown = dropdowns.add({						stringList:myList,						selectedIndex:0});				}				var myAddPage = checkboxControls.add({					staticLabel: "or create a new page"//				checkedState: true					});			}						//Create another border panel.			with(borderPanels.add()){				staticTexts.add({staticLabel:"Choose Scope:"});				var myRadioButtonGroup = radiobuttonGroups.add();				with(myRadioButtonGroup){					var myLeftRadioButton = radiobuttonControls.add({staticLabel:"focus", checkedState:true});					var myCenterRadioButton = radiobuttonControls.add({staticLabel:"normal"});					var myRightRadioButton = radiobuttonControls.add({staticLabel:"small"});				}			}						with(borderPanels.add({minWidth:200})){								var myPlaceTablesCheckbox = checkboxControls.add({					staticLabel: "place all tables on selected page?"//				checkedState: true					});				var myPlaceTablesExitCheckbox = checkboxControls.add({						staticLabel: "end after placing the tables?",					checkedState: true						});				var myClearStructureCheckbox = checkboxControls.add({					staticLabel: "remove all xmlElements after import?"//				checkedState: true					});			}		}		//Display the dialog box.	if(myDialog.show() == true){//		var myPage;//		var myPageName;		if(myAddPage.checkedState==true){			myPage = myDoc.pages.add();			myPageName = myPage.name;		}else {//			myPage = myList[myPageDropdown.selectedIndex];			myPageName =  myList[myPageDropdown.selectedIndex];		}				var placeTables;		if(myPlaceTablesCheckbox.checkedState==true){			placeTables = true;		}else{			placeTables = false;		}		var exitAfterTables;		if(myPlaceTablesExitCheckbox.checkedState==true){			exitAfterTables = true;		}else{			exitAfterTables = false;		}				if(placeTables ==true ){			var myNewPage = myDoc.pages.item(myPageName);			for(var i = 0; i <11;i++){			placeAllTables(myDoc,myNewPage,i);				}			if(exitAfterTables == true){				exit();							}						}						var placeAllBool;		var focusBool;		var normalBool;		var smallBool;		var groupSelector;		if(myPlaceAll.checkedState==true){			placeAllBool = true;			focusBool = false;				normalBool = false;			smallBool = false;			groupSelector = 0;		}else{			groupSelector = myGroupDropdown.selectedIndex;			placeAllBool = false;			if(myRadioButtonGroup.selectedButton==0){				focusBool = true;					normalBool = false;				smallBool = false;			}else if(myRadioButtonGroup.selectedButton==1){				focusBool = false;					normalBool = true;				smallBool = false;			}else if(myRadioButtonGroup.selectedButton==2){				focusBool = false;					normalBool = false;				smallBool = true;			}		}		var clearStructure;		if(myClearStructureCheckbox.checkedState==true){			clearStructure = true;		}else{			clearStructure = false;		}		myDialog.destroy();				myPage = myDoc.pages.item(myPageName);				placeData(myDoc, myPage, groupSelector, placeAllBool, focusBool, normalBool, smallBool,myErrorLog,myLogFile);				if(clearStructure ==true ){			myDoc.xmlElements.everyItem().remove();		}	}	else{				myDialog.destroy();		var myFile = myLogFile;   		var myData = myErrorLog;		writeData (myFile, myData );		alert("all that thinking for nothing? Better luck nexttime!");			}	}	  }//---------- functions taken from RecordFindChange_CS3-CS5.jsx//function writeData (myFile , aData )  //{  //	var myResult;//   if( myFile!='' )  //   {   //      //Open the file for writing.   //      myResult = myFile.open( 'w', undefined, undefined );   //   }  //   if( myResult != false )  //   {     //      myFile.writeln( aData );         //      myFile.close();   //      myFile.execute();  //   }   //} function myGetFileName()  {   	var myFolder = app.activeDocument.filePath;      var myFile =  new File( myFolder+'/log.txt' )  //      if ( myFile == null ){exit()};     return myFile;   }  function mapManually(myDoc){		myDoc.xmlImportMaps.add(myDoc.xmlTags.item("artikelNr"),myDoc.paragraphStyles.item("artikelNr"));	myDoc.xmlImportMaps.add(myDoc.xmlTags.item("laufNummer"),myDoc.characterStyles.item("laufNummer"));	myDoc.xmlImportMaps.add(myDoc.xmlTags.item("artikelBezeichnungMitLN"),myDoc.paragraphStyles.item("artikelBezeichnung")) ;	myDoc.xmlImportMaps.add(myDoc.xmlTags.item("artikelBezeichnung"),myDoc.paragraphStyles.item("artikelBezeichnung")) ;	myDoc.xmlImportMaps.add(myDoc.xmlTags.item("artikelBeschreibung"),myDoc.paragraphStyles.item("artikelBeschreibung")) ;	myDoc.xmlImportMaps.add(myDoc.xmlTags.item("artikelText"),myDoc.paragraphStyles.item("artikelText")) ;	myDoc.xmlImportMaps.add(myDoc.xmlTags.item("artikelText_Aufzaehlung"),myDoc.paragraphStyles.item("artikelText_Aufzaehlung mit Einzug")) ;	myDoc.xmlImportMaps.add(myDoc.xmlTags.item("artikelZeileANBPmitLN"),myDoc.paragraphStyles.item("artikelZeileANBPmitLN")) ;	myDoc.xmlImportMaps.add(myDoc.xmlTags.item("artikelZeileANPmitLN"),myDoc.paragraphStyles.item("artikelZeileANPmitLN")) ;	myDoc.xmlImportMaps.add(myDoc.xmlTags.item("artikelZeileABPmitLN"),myDoc.paragraphStyles.item("artikelZeileABPmitLN")) ;	myDoc.xmlImportMaps.add(myDoc.xmlTags.item("artikelZeileANBPohneLN"),myDoc.paragraphStyles.item("artikelZeileANBPohneLN")) ;	myDoc.xmlImportMaps.add(myDoc.xmlTags.item("artikelZeileANPohneLN"),myDoc.paragraphStyles.item("artikelZeileANPohneLN")) ;	myDoc.xmlImportMaps.add(myDoc.xmlTags.item("artikelZeileABPohneLN"),myDoc.paragraphStyles.item("artikelZeileABPohneLN")) ;	myDoc.xmlImportMaps.add(myDoc.xmlTags.item("laufNummerBild"),myDoc.paragraphStyles.item("laufNummerBild")) ;	myDoc.mapXMLTagsToStyles();}